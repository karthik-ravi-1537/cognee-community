from typing import Protocol, List, Dict, Any, Optional
from uuid import UUID
from cognee.infrastructure.engine import DataPoint

class GraphDBInterface(Protocol):
    """Protocol definition for GraphDBInterface to enable mypy checking."""
    
    async def query(self, query: str, params: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]: ...
    
    async def has_node(self, node_id: UUID) -> bool: ...
    
    async def add_node(self, node: DataPoint) -> None: ...
    
    async def add_nodes(self, nodes: List[DataPoint]) -> None: ...
    
    async def extract_node(self, node_id: UUID) -> Dict[str, Any]: ...
    
    async def extract_nodes(self, node_ids: List[UUID]) -> List[Dict[str, Any]]: ...
    
    async def delete_node(self, node_id: UUID) -> None: ...
    
    async def delete_nodes(self, node_ids: List[UUID]) -> None: ...
    
    async def has_edge(self, from_node: str, to_node: str, edge_label: str) -> bool: ...
    
    async def has_edges(self, edges: List[tuple[str, str, str]]) -> List[bool]: ...
    
    async def add_edge(self, from_node: str, to_node: str, edge_label: str, edge_properties: Dict[str, Any]) -> None: ...
    
    async def add_edges(self, edges: List[tuple[str, str, str, Dict[str, Any]]]) -> None: ...
    
    async def get_edges(self, from_node: str, to_node: str) -> List[Dict[str, Any]]: ...
    
    async def get_disconnected_nodes(self) -> List[str]: ...
    
    async def get_predecessors(self, node_id: UUID, edge_label: Optional[str] = None) -> List[Dict[str, Any]]: ...
    
    async def get_successors(self, node_id: UUID, edge_label: Optional[str] = None) -> List[Dict[str, Any]]: ...
    
    async def get_neighbors(self, node_id: UUID) -> List[Dict[str, Any]]: ...
    
    async def get_connections(self, node_id: UUID) -> List[Dict[str, Any]]: ...
    
    async def remove_connection_to_predecessors_of(self, node_id: UUID) -> None: ...
    
    async def remove_connection_to_successors_of(self, node_id: UUID) -> None: ...
    
    async def delete_graph(self) -> None: ...
    
    async def get_graph_data(self) -> tuple[List[Dict[str, Any]], List[Dict[str, Any]]]: ...
    
    async def get_graph_metrics(self) -> Dict[str, Any]: ...