from typing import Protocol, List, Dict, Any, Optional, Union, Tuple, Type
from uuid import UUID
from cognee.infrastructure.engine import DataPoint

class GraphDBInterface(Protocol):
    """Protocol definition for GraphDBInterface to enable mypy checking."""

    async def query(self, query: str, params: Dict[str, Any]) -> List[Any]: ...
    async def add_node(
        self, node: Union[DataPoint, str], properties: Optional[Dict[str, Any]] = None
    ) -> None: ...
    async def add_nodes(
        self, nodes: Union[List[Tuple[str, Dict[str, Any]]], List[DataPoint]]
    ) -> None: ...
    async def delete_node(self, node_id: str) -> None: ...
    async def delete_nodes(self, node_ids: List[str]) -> None: ...
    async def get_node(self, node_id: str) -> Optional[Dict[str, Any]]: ...
    async def get_nodes(self, node_ids: List[str]) -> List[Dict[str, Any]]: ...
    async def add_edge(
        self,
        source_id: str,
        target_id: str,
        relationship_name: str,
        properties: Optional[Dict[str, Any]] = None,
    ) -> None: ...
    async def add_edges(
        self,
        edges: Union[
            List[Tuple[str, str, str, Dict[str, Any]]],
            List[Tuple[str, str, str, Optional[Dict[str, Any]]]],
        ],
    ) -> None: ...
    async def delete_graph(self) -> None: ...
    async def get_graph_data(
        self,
    ) -> Tuple[
        List[Tuple[str, Dict[str, Any]]], List[Tuple[str, str, str, Dict[str, Any]]]
    ]: ...
    async def get_graph_metrics(
        self, include_optional: bool = False
    ) -> Dict[str, Any]: ...
    async def has_edge(
        self, source_id: str, target_id: str, relationship_name: str
    ) -> bool: ...
    async def has_edges(
        self, edges: List[Tuple[str, str, str, Dict[str, Any]]]
    ) -> List[Tuple[str, str, str, Dict[str, Any]]]: ...
    async def get_edges(
        self, node_id: str
    ) -> List[Tuple[str, str, str, Dict[str, Any]]]: ...
    async def get_neighbors(self, node_id: str) -> List[Dict[str, Any]]: ...
    async def get_nodeset_subgraph(
        self, node_type: Type[Any], node_name: List[str]
    ) -> Tuple[
        List[Tuple[int, Dict[str, Any]]], List[Tuple[int, int, str, Dict[str, Any]]]
    ]: ...
    async def get_connections(
        self, node_id: Union[str, UUID]
    ) -> List[Tuple[Dict[str, Any], Dict[str, Any], Dict[str, Any]]]: ...
