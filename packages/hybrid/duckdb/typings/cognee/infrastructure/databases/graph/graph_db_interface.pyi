from typing import Any, Protocol
from uuid import UUID

from cognee.infrastructure.engine import DataPoint

class GraphDBInterface(Protocol):
    """Protocol definition for GraphDBInterface to enable mypy checking."""

    async def query(self, query: str, params: dict[str, Any]) -> list[Any]: ...
    async def add_node(
        self, node: DataPoint | str, properties: dict[str, Any] | None = None
    ) -> None: ...
    async def add_nodes(
        self, nodes: list[tuple[str, dict[str, Any]]] | list[DataPoint]
    ) -> None: ...
    async def delete_node(self, node_id: str) -> None: ...
    async def delete_nodes(self, node_ids: list[str]) -> None: ...
    async def get_node(self, node_id: str) -> dict[str, Any] | None: ...
    async def get_nodes(self, node_ids: list[str]) -> list[dict[str, Any]]: ...
    async def add_edge(
        self,
        source_id: str,
        target_id: str,
        relationship_name: str,
        properties: dict[str, Any] | None = None,
    ) -> None: ...
    async def add_edges(
        self,
        edges: list[tuple[str, str, str, dict[str, Any]]]
        | list[tuple[str, str, str, dict[str, Any] | None]],
    ) -> None: ...
    async def delete_graph(self) -> None: ...
    async def get_graph_data(
        self,
    ) -> tuple[list[tuple[str, dict[str, Any]]], list[tuple[str, str, str, dict[str, Any]]]]: ...
    async def get_graph_metrics(self, include_optional: bool = False) -> dict[str, Any]: ...
    async def has_edge(self, source_id: str, target_id: str, relationship_name: str) -> bool: ...
    async def has_edges(
        self, edges: list[tuple[str, str, str, dict[str, Any]]]
    ) -> list[tuple[str, str, str, dict[str, Any]]]: ...
    async def get_edges(self, node_id: str) -> list[tuple[str, str, str, dict[str, Any]]]: ...
    async def get_neighbors(self, node_id: str) -> list[dict[str, Any]]: ...
    async def get_nodeset_subgraph(
        self, node_type: type[Any], node_name: list[str]
    ) -> tuple[list[tuple[int, dict[str, Any]]], list[tuple[int, int, str, dict[str, Any]]]]: ...
    async def get_connections(
        self, node_id: str | UUID
    ) -> list[tuple[dict[str, Any], dict[str, Any], dict[str, Any]]]: ...
